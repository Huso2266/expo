// @generated by expo-module-scripts

if (System.env.MAVEN_EAS) {
  def url = new URL(System.env.MAVEN_EAS)
  def foundAarFile = false
  if (url.getProtocol() == 'file') {
    def aarFile = fileTree(dir: url.getFile(), include: "**/${name}/${version}/*.aar").getFiles()[0]
    foundAarFile = !!aarFile
  } else {
    url = new URL("${url.toString()}/${group.replace('.', '/')}/${name}/${version}/${name}-${version}.pom")
    def conn = url.openConnection()
    conn.setRequestMethod('HEAD')
    conn.connect()
    def status = conn.getResponseCode()
    foundAarFile = status >= 200 && status < 300
  }

  if (foundAarFile) {
    ext.isAarProject = true
    configurations.maybeCreate('default')
    dependencies.add('default', "${group}:${name}:${version}")

    // Rewrite as different group name and make the current project as different artifact between aar
    group = "${group}.aar-container"

    return
  }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

// Upload android library to maven with javadoc and android sources
configurations {
  deployerJars
}

// Creating sources with comments
task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

// Put the androidSources and javadoc to the artifacts
artifacts {
  archives androidSourcesJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      configuration = configurations.deployerJars
      if (System.env.MAVEN_PUBLISH_EAS) {
        repository(url: System.env.MAVEN_PUBLISH_EAS) {
          if (System.env.MAVEN_PUBLISH_EAS_USERNAME && System.env.MAVEN_PUBLISH_EAS_PASSWORD) {
            authentication(userName: System.env.MAVEN_PUBLISH_EAS_USERNAME, password: System.env.MAVEN_PUBLISH_EAS_PASSWORD)
          }
        }
      } else {
        repository(url: mavenLocal().url)
      }
    }
  }
}

task uploadExpoArchives {
  dependsOn(uploadArchives)
}
